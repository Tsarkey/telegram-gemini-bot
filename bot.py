import google.generativeai as genai
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters
import os

# üîë –ë–µ—Ä—ë–º –∫–ª—é—á–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (Render ‚Üí Environment)
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")

# –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ —Ç–æ–∫–µ–Ω—ã –Ω–µ –ø—É—Å—Ç—ã–µ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –≤ –ª–æ–≥–∞—Ö Render)
print("DEBUG TELEGRAM_TOKEN:", TELEGRAM_TOKEN)
print("DEBUG GEMINI_API_KEY:", GEMINI_API_KEY)

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Gemini
genai.configure(api_key=GEMINI_API_KEY)
model = genai.GenerativeModel("gemini-2.0-flash")


# –ö–æ–º–∞–Ω–¥–∞ /start
def start(update, context):
    update.message.reply_text("–ù—É –ø—Ä–∏–≤–µ—Ç. –ß–µ–≥–æ –∏–∑–≤–æ–ª–∏—à—å?")


# –û—Ç–≤–µ—Ç –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
def handle_message(update, context):
    user_message = update.message.text

    try:
        response = model.generate_content(user_message)
        bot_reply = response.text
    except Exception as e:
        bot_reply = f"–û—à–∏–±–∫–∞: {e}"

    update.message.reply_text(bot_reply)


def main():
    # –°–æ–∑–¥–∞—ë–º Updater
    updater = Updater(token=TELEGRAM_TOKEN, use_context=True)
    dp = updater.dispatcher

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    updater.start_polling()
    updater.idle()


if __name__ == "__main__":
    main()
