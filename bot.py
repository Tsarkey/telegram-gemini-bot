import os
import google.generativeai as genai
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters

# –ë–µ—Ä—ë–º –∫–ª—é—á–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")

print(f"DEBUG TELEGRAM_TOKEN: {TELEGRAM_TOKEN!r}")
print(f"DEBUG GEMINI_API_KEY: {GEMINI_API_KEY!r}")

if not TELEGRAM_TOKEN or not GEMINI_API_KEY:
    raise RuntimeError("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_TOKEN –∏–ª–∏ GEMINI_API_KEY!")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Gemini
genai.configure(api_key=GEMINI_API_KEY)
model = genai.GenerativeModel("gemini-2.0-flash")

# /start –∫–æ–º–∞–Ω–¥–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –Ω–∞ Render + Gemini ü§ñ")

# –û—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_message = update.message.text
    try:
        response = model.generate_content(user_message)
        bot_reply = response.text
    except Exception as e:
        bot_reply = f"–û—à–∏–±–∫–∞: {e}"
    await update.message.reply_text(bot_reply)

def main():
    app = Application.builder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –∂–¥—ë—Ç —Å–æ–æ–±—â–µ–Ω–∏—è...")
    app.run_polling()

if __name__ == "__main__":
    main()
