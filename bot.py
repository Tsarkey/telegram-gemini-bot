import google.generativeai as genai
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# üîë –í—Å—Ç–∞–≤—å —Å—é–¥–∞ –∫–ª—é—á–∏
TELEGRAM_TOKEN = "8178900121:AAE8jn5jYM-i7MSaDpN23owlwIvPNRYVsr4"
GEMINI_API_KEY = "AIzaSyBw3jsGJyvUvb_UeMHmpQqDFo9ednZeTng"

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Gemini
genai.configure(api_key=GEMINI_API_KEY)
model = genai.GenerativeModel("gemini-2.0-flash")

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ù—É –ø—Ä–∏–≤–µ—Ç. –ß–µ–≥–æ –∏–∑–≤–æ–ª–∏—à—å?")

# –û—Ç–≤–µ—Ç –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_message = update.message.text

    try:
        response = model.generate_content(user_message)
        bot_reply = response.text
    except Exception as e:
        bot_reply = f"–û—à–∏–±–∫–∞: {e}"

    await update.message.reply_text(bot_reply)

def main():
    app = Application.builder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == "__main__":
    main()