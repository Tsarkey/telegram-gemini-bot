import google.generativeai as genai
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters
import os

# üîë –ë–µ—Ä—ë–º –∫–ª—é—á–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (Render ‚Üí Environment)
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Gemini
genai.configure(api_key=GEMINI_API_KEY)
model = genai.GenerativeModel("gemini-2.0-flash")

# /start
def start(update, context):
    update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Å Gemini ü§ñ")

# –æ—Ç–≤–µ—Ç –Ω–∞ —Ç–µ–∫—Å—Ç
def handle_message(update, context):
    user_message = update.message.text
    try:
        response = model.generate_content(user_message)
        bot_reply = response.text
    except Exception as e:
        bot_reply = f"–û—à–∏–±–∫–∞: {e}"
    update.message.reply_text(bot_reply)

def main():
    updater = Updater(TELEGRAM_TOKEN, use_context=True)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω‚Ä¶")
    updater.start_polling()
    updater.idle()

if __name__ == "__main__":
    main()
